<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Youngin Won</title>
    <description>wonyoungin04@gmail.com
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 16 Oct 2025 21:33:38 +0900</pubDate>
    <lastBuildDate>Thu, 16 Oct 2025 21:33:38 +0900</lastBuildDate>
    <generator>Jekyll v3.10.0</generator>
    
      <item>
        <title>[BoB 프로젝트 주제 분석]</title>
        <description>&lt;h1 id=&quot;can-네트워크를-통한-자동차-제어&quot;&gt;CAN 네트워크를 통한 자동차 제어&lt;/h1&gt;

&lt;h2 id=&quot;can-controller-area-network&quot;&gt;CAN (Controller Area Network)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;차량 내 각 ECU 장치들이 Host Computer 없이 서로 통신하기 위해 설계된 Message 기반 표준 Protocol&lt;/li&gt;
  &lt;li&gt;ECU(Electronic Control Unit): 자동차 내에서 엔진, 변속기, 브레이크 등을 제어하는 임베디드 시스템&lt;/li&gt;
  &lt;li&gt;차량의 원활한 제어를 위해 각 ECU 간의 통신이 필요&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;취약점&quot;&gt;취약점&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;주소 개념이 없음
    &lt;ul&gt;
      &lt;li&gt;CAN은 출발지/목적지 주소가 없고, 단순히 메시지 ID만으로 구분&lt;br /&gt;
  → 누가 보냈는지는 알 수 없음: 공격자가 같은 ID로 위조 메시지를 보내는 게 가능&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;보안 기능이 없음
    &lt;ul&gt;
      &lt;li&gt;암호화 x&lt;/li&gt;
      &lt;li&gt;인증 x&lt;/li&gt;
      &lt;li&gt;무결성 검증 x&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;network-topology&quot;&gt;Network topology&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;초기: MESH&lt;/strong&gt;&lt;br /&gt;
partially connected&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/article_images/2025-10-16-can/image.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;복잡한 인터페이스, 정비 어려움, 무게/비용 증가, 확장 어려움&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;현재 : bus&lt;/strong&gt;&lt;br /&gt;
&lt;img src=&quot;/assets/article_images/2025-10-16-can/image%201.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;단순한 하네스 구조, 정비 쉬움, 비용 감소, 가벼움, 용이한 확장성&lt;/p&gt;

&lt;h2 id=&quot;characteristics&quot;&gt;Characteristics&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Multi-master access / Broadcast&lt;/strong&gt;&lt;/p&gt;
    &lt;p&gt;모든 ECU는 메시지를 송신할 수 있고, 모든 ECU는 그 메시지를 수신할 수 있음&lt;/p&gt;
    
    &lt;img src=&quot;/assets/article_images/2025-10-16-can/image%202.png&quot; alt=&quot;image.png&quot; /&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CSMA/CD (Carrier Sense Multiple Access with Collision Detection)&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;여러 장치가 하나의 공유된 통신 채널을 사용할 때 충돌을 피하기 위한 방법&lt;/li&gt;
      &lt;li&gt;충돌 발생 시 전송을 멈춤&lt;/li&gt;
    &lt;/ul&gt;
    
    &lt;img src=&quot;/assets/article_images/2025-10-16-can/image%203.png&quot; alt=&quot;image.png&quot; /&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Message prioritization&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;여러 노드가 동시에 전송을 시도할 때, 버스 상에서 충돌 없이 우선순위가 높은 메시지만 살아남는 방식&lt;/li&gt;
      &lt;li&gt;Arbitration Field(식별자 + 제어 비트)를 비교&lt;/li&gt;
      &lt;li&gt;Dominant(우성) bit: 0 (&amp;gt;= 0.9 V), Recessive(열성) bit: 1 (&amp;lt;= 0.5 V)&lt;/li&gt;
    &lt;/ul&gt;
    
    &lt;img src=&quot;/assets/article_images/2025-10-16-can/image%204.png&quot; alt=&quot;image.png&quot; /&gt;

    &lt;p&gt;&lt;strong&gt;2.0A vs 2.0B&lt;/strong&gt;&lt;/p&gt;
    
    &lt;img src=&quot;/assets/article_images/2025-10-16-can/image%205.png&quot; alt=&quot;image.png&quot; /&gt;
    
    &lt;img src=&quot;/assets/article_images/2025-10-16-can/image%206.png&quot; alt=&quot;image.png&quot; /&gt;
    
    Arbitration Field와 Control Field가 달라짐

    &lt;table class=&quot;md-table&quot;&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;구분&lt;/th&gt;
          &lt;th&gt;CAN 2.0A&lt;/th&gt;
          &lt;th&gt;CAN 2.0B&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;Identifier 길이&lt;/td&gt;
          &lt;td&gt;11비트&lt;/td&gt;
          &lt;td&gt;29비트&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;Arbitration Field&lt;/td&gt;
          &lt;td&gt;ID(11) + RTR(1)&lt;/td&gt;
          &lt;td&gt;ID(11) + SRR(1) + IDE(1) + Ext ID(18) + RTR(1)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;IDE 비트&lt;/td&gt;
          &lt;td&gt;0 (Standard)&lt;/td&gt;
          &lt;td&gt;1 (Extended)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;메시지 ID 개수&lt;/td&gt;
          &lt;td&gt;2,048개&lt;/td&gt;
          &lt;td&gt;약 5억 개&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;호환성&lt;/td&gt;
          &lt;td&gt;2.0A끼리만 완전 호환&lt;/td&gt;
          &lt;td&gt;2.0A/2.0B 모두 수신 가능&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;

    &lt;p&gt;&lt;strong&gt;같은 11비트 Base ID를 가진 2.0A 프레임과 2.0B 프레임이 동시에 전송된다면:&lt;/strong&gt;&lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;strong&gt;CAN 2.0A Remote Frame&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;Arbitration Field = 11비트 ID + RTR(1비트, 0일 수도 있고 1일 수도 있음)&lt;/li&gt;
          &lt;li&gt;Control Field = 1 비트 IDE(항상 0) + 1 bit reservation + 4 bits&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;CAN 2.0B Extended Frame&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;Arbitration Field = 11비트 Base ID + SRR(항상 1, recessive) + IDE(항상 1, recessive) + 18비트 Extended ID + RTR&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
    &lt;p&gt;→ 2.0A의 RTR이 1이더라도 13번째 비트가 2.0A는 0, 2.0B는 1이므로 A가 우선&lt;/p&gt;
    &lt;br /&gt;
    &lt;p&gt;&lt;strong&gt;문제 예시&lt;/strong&gt;&lt;/p&gt;
    
    &lt;img src=&quot;/assets/article_images/2025-10-16-can/image%207.png&quot; alt=&quot;image.png&quot; /&gt;

    식별자(ID)가 낮을수록 우선순위가 높음  
    0x123 &amp;lt; 0x140  
    → 0x123가 더 낮은 값이므로 먼저 전송됨  
    참고: 데이터 필드(EF EF EF EF, 00 00 00 00)는 우선순위 결정에 영향 x
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Limited data length (0-8 bytes)&lt;/strong&gt;&lt;/p&gt;
    &lt;p&gt;DLC (Data Length Code) : 데이터 필드에 포함된 데이터 바이트의 수&lt;br /&gt;
    DLC == 데이터 필드 바이트의 길이&lt;/p&gt;
   
   &lt;img src=&quot;/assets/article_images/2025-10-16-can/image%208.png&quot; alt=&quot;image.png&quot; /&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Up to 1 Mbit/s data rate&lt;/strong&gt;&lt;/p&gt;
    &lt;p&gt;차량의 실시간 제어와 안정적인 데이터 교환을 가능하게 함&lt;/p&gt;

    | 유형 | 속도 범위 | 설명 |
    | --- | --- | --- |
    | CAN-A | ~10 kbit/s | 저속, 간단한 센서용 |
    | CAN-B | 10~125 kbit/s | 중속, 일반 제어용 |
    | CAN-C | 125~1000 kbit/s | 고속, 실시간 제어용 (최대 1 Mbit/s) |
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;frame&quot;&gt;Frame&lt;/h2&gt;

&lt;h3 id=&quot;data-frame&quot;&gt;Data frame&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/article_images/2025-10-16-can/image%209.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;필드&lt;/th&gt;
      &lt;th&gt;크기&lt;/th&gt;
      &lt;th&gt;설명&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Start of Frame (SOF)&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;1 bit&lt;/td&gt;
      &lt;td&gt;프레임 시작을 알림 (동기화용)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Arbitration Field&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;11비트(2.0A) 또는 29비트(2.0B)&lt;/td&gt;
      &lt;td&gt;메시지 ID와 우선순위 결정, RTR 비트 포함&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Control Field&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;6 bits&lt;/td&gt;
      &lt;td&gt;IDE(확장 여부), 예약 비트, DLC(Data Length Code: 데이터 길이)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Data Field&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;0~64 bits (0~8 bytes)&lt;/td&gt;
      &lt;td&gt;실제 전송되는 데이터&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;CRC Field&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;16 bits&lt;/td&gt;
      &lt;td&gt;오류 검출을 위한 Cyclic Redundancy Check&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;ACK Field&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;2 bits&lt;/td&gt;
      &lt;td&gt;수신 노드가 정상 수신 여부를 확인 (송신 노드가 아닌 수신 노드가 설정)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;End of Frame (EOF)&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;7 bits&lt;/td&gt;
      &lt;td&gt;프레임 종료 표시&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Interframe Space (IFS)&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;3 bits&lt;/td&gt;
      &lt;td&gt;프레임 간 간격 (111)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;특징&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;각 프레임이 끝난 뒤 3비트(111)의 간격이 들어감&lt;/li&gt;
  &lt;li&gt;RTR(Remote Transmission Request): 0 → remote frame과 구별하기 위함&lt;/li&gt;
  &lt;li&gt;Transmitter node ↔ Receiver node&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;remote-frame&quot;&gt;Remote frame&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/article_images/2025-10-16-can/image%2010.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;특징&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;RTR: 1&lt;br /&gt;
→ remote frame과 data frame이 충돌할 경우 Identifier의 11bit가 동일하다면 data frame의 RTR이 0이기 때문에 항상 우선권을 가짐&lt;/li&gt;
  &lt;li&gt;Transmitter node -&amp;gt; Receiver node (request message)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;error-frame&quot;&gt;Error frame&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/article_images/2025-10-16-can/image%2011.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Error Flag (6비트)
    &lt;ul&gt;
      &lt;li&gt;오류를 알리는 신호&lt;/li&gt;
      &lt;li&gt;Active Error Flag: 000000&lt;/li&gt;
      &lt;li&gt;Passive Error Flag: 111111&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Echo Error Flag
    &lt;ul&gt;
      &lt;li&gt;Error Flag가 전송된 뒤, 버스 전파 지연(delay) 때문에 다른 ECU들이 뒤늦게 오류를 감지하고 추가로 Error Flag를 내보낼 수 있음&lt;/li&gt;
      &lt;li&gt;이때 기존 Error Flag에 이어 붙는 형태로 나타나는 것이 Echo Error Flag&lt;/li&gt;
      &lt;li&gt;결과적으로 Error Flag + Echo Error Flag로 이어져서, 오류 신호가 네트워크 전체에 확실히 퍼지도록 보장&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Error Delimiter (8비트)
    &lt;ul&gt;
      &lt;li&gt;11111111 (recessive)&lt;/li&gt;
      &lt;li&gt;error 프레임의 끝을 표시&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Error frame은 Data/Remote frame뒤에 바로 붙어 전송됨(IFS x)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;에러-종류&quot;&gt;에러 종류&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;bit error&lt;/strong&gt;&lt;br /&gt;
    노드가 버스에 보낸 비트와 버스에서 실제로 관측한 비트가 다른 경우 발생&lt;/p&gt;
    &lt;img src=&quot;/assets/article_images/2025-10-16-can/image%2012.png&quot; alt=&quot;image.png&quot; /&gt;
    &lt;ul&gt;
      &lt;li&gt;여기서 node2가 receiver로 단순히 bus에 올라온 값을 읽음&lt;/li&gt;
      &lt;li&gt;네번째 막대에서 node1 값은 0인데 bus에는 1이 올라감(0이 dominant한데도)&lt;/li&gt;
      &lt;li&gt;node1이 자기 값이랑 bus값을 비교해서 에러 감지, 즉시 active error flag를 내보내며 프레임을 무효화하고 이후에 재전송함&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;stuff error&lt;/strong&gt;&lt;br /&gt;
    CAN의 비트 스터핑 규칙(연속 동일 비트 5개 후 반대 비트 삽입, 수신 CAN 노드에서 자동으로 제거됨) 위반 시 발생&lt;/p&gt;
    &lt;img src=&quot;/assets/article_images/2025-10-16-can/image%2013.png&quot; alt=&quot;image.png&quot; /&gt;
    &lt;img src=&quot;/assets/article_images/2025-10-16-can/image%2014.png&quot; alt=&quot;image.png&quot; /&gt;
    &lt;p&gt;붉은색으로 표시된 부분에 스터핑 규칙 적용, error/overload frame에는 적용 x&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;CRC error&lt;/strong&gt;&lt;br /&gt;
    수신 노드가 계산한 CRC와 프레임 내 CRC 필드 값이 다름&lt;/p&gt;
    &lt;img src=&quot;/assets/article_images/2025-10-16-can/image%2015.png&quot; alt=&quot;image.png&quot; /&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;Node 1 (송신자)&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;데이터 프레임을 전송하면서 마지막에 CRC 시퀀스(X)를 붙여서 보냄&lt;/li&gt;
          &lt;li&gt;이 CRC는 송신자가 자기 데이터(ID, DLC, Data Field 등)를 기반으로 계산한 값&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Bus (공유 매체)&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;송신자가 보낸 CRC 값(X)이 그대로 버스에 올라감&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;Node 2 (수신자)&lt;/strong&gt;
        &lt;ul&gt;
          &lt;li&gt;Node 2는 수신한 데이터(ID, DLC, Data Field 등)를 기반으로 자체적으로 CRC를 다시 계산&lt;/li&gt;
          &lt;li&gt;계산 결과가 Y였는데, 버스에서 받은 CRC 값(X)와 다르면 → CRC Error&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Form error&lt;/strong&gt;&lt;br /&gt;
    특정 포맷 필드가 표준 규격과 다른 값을 가질 때 발생&lt;/p&gt;
    &lt;img src=&quot;/assets/article_images/2025-10-16-can/image%2016.png&quot; alt=&quot;image.png&quot; /&gt;
    &lt;p&gt;SOF, CRC Del, ACK Del, EOF 의 값이 1이어야 하는데 0으로 관측되는 등&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;ACK error&lt;/strong&gt;&lt;br /&gt;
    송신 노드가 ACK 슬롯에서 0을 읽지 못했을 때(응답 노드가 없거나 모두 실패)&lt;/p&gt;
    &lt;img src=&quot;/assets/article_images/2025-10-16-can/image%2017.png&quot; alt=&quot;image.png&quot; /&gt;
    &lt;ul&gt;
      &lt;li&gt;ACK Slot (1비트)
        &lt;ul&gt;
          &lt;li&gt;송신 노드는 항상 recessive(1)을 내보냄&lt;/li&gt;
          &lt;li&gt;수신 노드가 프레임을 정상적으로 받았다면, 이 자리에서 dominant(0)를 내보냄&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;ACK Delimiter (1비트)
        &lt;ul&gt;
          &lt;li&gt;항상 recessive(1)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;송신 노드가 ACK Slot에서 recessive(1)만 읽은 경우 → 즉, 어느 수신 노드도 dominant(0)으로 응답하지 않은 경우 에러&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Appllication error&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;상위 소프트웨어/로직 오류 (의미적 데이터 문제)&lt;/li&gt;
      &lt;li&gt;CAN 프로토콜 레벨에서는 Error Frame이 발생하지 않을 수도 있음&lt;/li&gt;
      &lt;li&gt;대신 ECU가 메시지를 무시하거나 Fault 상태로 전환, DTC 기록 등으로 처리&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;overload-frame&quot;&gt;Overload frame&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/article_images/2025-10-16-can/image%2018.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;수신 노드가 내부적으로 바빠서 다음 메시지를 바로 처리할 수 없거나(지연 요구) IFS 구간에서 dominant 비트가 감지되면 Overload Frame으로 인식&lt;/li&gt;
  &lt;li&gt;Overload Flag (6비트)
    &lt;ul&gt;
      &lt;li&gt;000000 (dominant)&lt;/li&gt;
      &lt;li&gt;Error Flag와 동일한 패턴이지만, IFS 구간에서만 나오면 Overload Frame으로 해석&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Overload Delimiter (8비트)
    &lt;ul&gt;
      &lt;li&gt;11111111 (recessive)&lt;/li&gt;
      &lt;li&gt;Overload Frame의 끝을 표시&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;overload frame은 Data/Remote frame뒤에 바로 붙어 전송됨(IFS x)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;attack-scenarios&quot;&gt;Attack Scenarios&lt;/h1&gt;

&lt;h3 id=&quot;dos-denial-of-service-flooding&quot;&gt;DoS (Denial of Service, Flooding)&lt;/h3&gt;

&lt;p&gt;높은 우선순위의 CAN ID  또는 데이터 필드를 주입하면 CAN 버스의 가용성이 파괴됨&lt;/p&gt;

&lt;h3 id=&quot;spoofing&quot;&gt;Spoofing&lt;/h3&gt;

&lt;p&gt;공격자의 의도에 따라 하나 이상의 타겟 ECU를 제어함&lt;br /&gt;
구체적인 데이터 필드로 CAN 메시지를 주입&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/article_images/2025-10-16-can/image%2019.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;replay&quot;&gt;Replay&lt;/h3&gt;

&lt;p&gt;정상 주행 중 데이터를 수집해 공격자가 원하는 시점에 이 메시지들을 전송&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/article_images/2025-10-16-can/image%2020.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;fuzzing&quot;&gt;Fuzzing&lt;/h3&gt;

&lt;p&gt;랜덤한 CAN ID와 데이터 필드를 보냄(공격자도 알 수 x)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/article_images/2025-10-16-can/image%2021.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;bus-offsuspension-attack&quot;&gt;Bus-off(Suspension attack)&lt;/h3&gt;

&lt;p&gt;정상적으로 동작하는 ECU를 CAN bus에서 제거하기 위한 공격&lt;br /&gt;
error frame이 발생하면 ECU는 해당 CAN 메시지를 재전송하므로 CAN bus의 부하가 증가함&lt;br /&gt;
→ 이를 해결하기 위해 passive/active/bus-off 모드가 구현되어 있음&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Error active 모드: 기본 상태, error frames가 128개 미만일 때&lt;/li&gt;
  &lt;li&gt;Error passive 모드: 데이터를 보내기 위해선 IFS (3비트) 이후 8비트를 더 기다림&lt;/li&gt;
  &lt;li&gt;Bus-off: 더 이상 데이터를 전송할 수 없음, ECU 재부팅 후에 데이터 전송 가능&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/article_images/2025-10-16-can/image%2022.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;masquerade-attackbus-off--spoofingreplay&quot;&gt;Masquerade attack(Bus-off + Spoofing/Replay)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Spoofing 공격에서 정상적으로 작동하는 CAN ID의 데이터도 표시가 됨&lt;/li&gt;
  &lt;li&gt;실제 차량이 정상 데이터와 공격 데이터를 번갈아 수신받기 때문에 공격의 피해가 줄어듦&lt;/li&gt;
  &lt;li&gt;탐지도 쉬워지기 때문에 공격자는 정상적으로 작동하는 ECU를 제거한 뒤 메시지를 보냄&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;실제 차량에 적용된 여러 보호기법을 공부하고 이를 우회해 공격하는 방법을 추가적으로 공부해보고 싶다.&lt;/p&gt;

&lt;p&gt;참고자료: &lt;a href=&quot;https://ocslab.hksecurity.net/publications&quot;&gt;HCRL&lt;/a&gt; 이휘재&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Oct 2025 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/%EA%B8%B0%EC%88%A0%EB%AC%B8%EC%84%9C/%EB%B8%94%EB%A1%9C%EA%B7%B8/2025/10/16/can.html</link>
        <guid isPermaLink="true">http://localhost:4000/%EA%B8%B0%EC%88%A0%EB%AC%B8%EC%84%9C/%EB%B8%94%EB%A1%9C%EA%B7%B8/2025/10/16/can.html</guid>
        
        <category>image</category>
        
        
        <category>기술문서/블로그</category>
        
      </item>
    
      <item>
        <title>Knights Frontier</title>
        <description>&lt;h1 id=&quot;활동-정리&quot;&gt;활동 정리&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h5 id=&quot;버그바운티&quot;&gt;버그바운티&lt;/h5&gt;
&lt;p&gt;&lt;br /&gt;
&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2025-55298&quot;&gt;CVE-2025-55298&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://nvd.nist.gov/vuln/detail/CVE-2025-55212&quot;&gt;CVE-2025-55212&lt;/a&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;h5 id=&quot;ctf워게임&quot;&gt;CTF/워게임&lt;/h5&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h5 id=&quot;개발오픈소스&quot;&gt;개발/오픈소스&lt;/h5&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h5 id=&quot;공모전자격증&quot;&gt;공모전/자격증&lt;/h5&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h5 id=&quot;논문컨퍼런스&quot;&gt;논문/컨퍼런스&lt;/h5&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h5 id=&quot;기술문서블로그&quot;&gt;기술문서/블로그&lt;/h5&gt;
&lt;p&gt;&lt;br /&gt;
&lt;a href=&quot;https://gardenia02.tistory.com/&quot;&gt;디지털포렌식 툴&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 15 Oct 2025 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/%EB%A9%94%EC%9D%B8/2025/10/15/first-post.html</link>
        <guid isPermaLink="true">http://localhost:4000/%EB%A9%94%EC%9D%B8/2025/10/15/first-post.html</guid>
        
        <category>image</category>
        
        
        <category>메인</category>
        
      </item>
    
  </channel>
</rss>
